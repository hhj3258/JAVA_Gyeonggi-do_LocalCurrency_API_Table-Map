import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import javax.swing.JTextField;
import java.awt.Component;
import javax.swing.ScrollPaneConstants;
import javax.swing.JComboBox;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerEvent;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.awt.Color;
import java.awt.SystemColor;
import java.awt.Font;
import javax.swing.JLabel;

public class test extends JFrame 
{

	public DataTableModel dataModel = new DataTableModel();	
	private JPanel contentPane;
	private JTable table;
	private JTextField txtserch;
	private JComboBox comboBox_1;
	
	private int count=1;
	
	private String[] combo=new String[2];
	private String choose="상호명";
	private String si="";
	private String x;
	private String y;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					test frame = new test();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public test() {
		setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		setTitle("\uD504\uB85C\uC81D\uD2B8_\uACBD\uAE30\uC9C0\uC5ED\uD654\uD3D0 \uAC00\uB9F9\uC810_20163329_\uD64D\uD604\uC900");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 953, 624);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		//페이지수 라벨
		JLabel lblNewLabel_1 = new JLabel("1");
		lblNewLabel_1.setBounds(464, 557, 30, 15);
		contentPane.add(lblNewLabel_1);
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		JButton btnNewButton = new JButton("\uB9AC\uC2A4\uD2B8 \uAC31\uC2E0");
		btnNewButton.setFont(new Font("맑은 고딕", Font.PLAIN, 15));
		btnNewButton.setForeground(Color.BLACK);
		btnNewButton.setBackground(Color.WHITE);
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				count=1;
				lblNewLabel_1.setText("1");
				txtserch.setText("");
				// 인터넷 연결이 필요하기 때문에 연속으로 누르는 것을 방지하기 위해 버튼 활성화를 끔
				btnNewButton.setEnabled(false);
				
				// Thread 로 덮어서, 버튼 멈춘 현상 제거
				// 원래는 handler 와 같은 루틴을 이용하여 main thread 에 message 를 날려 ui 를 refresh 하는 작업을 하는 것이 정석
				// 여기서는 간단히 해결 하기 위해 그냥 전체 영역을 thread 로 덮음. 
				// 안드로이드같은 플랫폼에서는 이렇게 하면 오류가 발생함.
				new Thread() {
					@Override
					public void run() {
						// [PPT 보고 진행하는 부분] 버튼 비활성화, 웹 함수 불러오는 부분, 버튼 활성화
						
						//버튼 비활성화
						btnNewButton.setEnabled(false);
						
						//웹 데이터 및 데이터 설정하는 함수를 불러온다.
						loadWebData();
						
						//모든 동작이 끝난 뒤에 버튼을 다시 활성화 시켜줌.
						btnNewButton.setEnabled(true);
					}
				}.start();
			}
		});
		btnNewButton.setBounds(786, 17, 116, 34);
		contentPane.add(btnNewButton);
		
		//지도버튼
		JButton btnMap = new JButton("\uC9C0\uB3C4\uB85C \uBCF4\uAE30");
		btnMap.setBackground(Color.WHITE);
		btnMap.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		btnMap.setEnabled(false);
		btnMap.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) 
			{
				String match=txtserch.getText();
				String url1="https://www.google.com/maps/search/"+match+"/@"+ x +","+ y +",17z";
				
				//브라우저에서 결과 확인
				ProcessBuilder pb = new ProcessBuilder("C:/Program Files (x86)/Google/Chrome/Application/chrome.exe", url1);
				try {
					pb.start();
				} catch (Exception e2) {
					
				}
	
			}
		});
		btnMap.setBounds(786, 61, 116, 34);
		contentPane.add(btnMap);
		///////////////////////////////////////////////////////////////////////////////////////////////////		
		
		//검색 버튼
		JButton btnNewButton_1 = new JButton("\uAC80\uC0C9");
		btnNewButton_1.setForeground(Color.BLACK);
		btnNewButton_1.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		btnNewButton_1.setBackground(Color.WHITE);
		btnNewButton_1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				count=1;
				lblNewLabel_1.setText("1");
				if(txtserch.getText().equals("")) {
					loadWebData();
				}
				else {
					String name=txtserch.getText();
					btnMap.setEnabled(true);
	
					btnNewButton_1.setEnabled(false);
					
					new Thread() {
						@Override
						public void run() {
							
							btnNewButton_1.setEnabled(false);
							loadWebData(name);
							btnNewButton_1.setEnabled(true);
						}
					}.start();
				}
			}
		});
		///////////////////////////////////////////////////////////////////////////////////////////////////

		table = new JTable(dataModel);
		//크기 설정 및 한개만 선택 가능하도록 설정
		table.setRowHeight(25);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		//scroll 넣기
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBounds(12,101,913,441);
		
		//버튼 및 리스트를 UI에 넣기
		contentPane.add(scrollPane);

		btnNewButton_1.setBounds(441, 58, 72, 23);
		contentPane.add(btnNewButton_1);
		
		txtserch = new JTextField();
		txtserch.setBounds(207, 59, 222, 21);
		contentPane.add(txtserch);
		txtserch.setColumns(10);
		
		
		//상호명, 업종명 콤보박스
		JComboBox comboBox = new JComboBox();
		comboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				choose=comboBox.getSelectedItem().toString();
			}
		});
		comboBox.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		comboBox.setBackground(Color.WHITE);
	
		combo[0]="상호명";
		combo[1]="업종명";

		comboBox.setModel(new DefaultComboBoxModel(combo));
		comboBox.setBounds(82, 58, 99, 23);
		contentPane.add(comboBox);
		///////////////////////////////////////////////////////////////////////////////////////////////////

		//지역명 콤보박스
		comboBox_1 = new JComboBox();
		comboBox_1.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		comboBox_1.setBackground(Color.WHITE);
		comboBox_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				si=comboBox_1.getSelectedItem().toString();
			}
		});
		comboBox_1.setModel(new DefaultComboBoxModel(new String[] {"\uC804\uC9C0\uC5ED", "\uAC00\uD3C9\uAD70", "\uACE0\uC591\uC2DC", "\uACFC\uCC9C\uC2DC", "\uAD11\uBA85\uC2DC", "\uAD11\uC8FC\uC2DC", 
				"\uAD6C\uB9AC\uC2DC", "\uAD70\uD3EC\uC2DC", "\uAE40\uD3EC\uC2DC", "\uB0A8\uC591\uC8FC\uC2DC", "\uB3D9\uB450\uCC9C\uC2DC", "\uBD80\uCC9C\uC2DC", "\uC131\uB0A8\uC2DC", "\uC218\uC6D0\uC2DC", 
				"\uC2DC\uD765\uC2DC", "\uC548\uC0B0\uC2DC", "\uC548\uC131\uC2DC", "\uC548\uC591\uC2DC", "\uC591\uC8FC\uC2DC", "\uC591\uD3C9\uAD70", "\uC5EC\uC8FC\uC2DC", "\uC5F0\uCC9C\uAD70", "\uC624\uC0B0\uC2DC", 
				"\uC6A9\uC778\uC2DC", "\uC758\uC655\uC2DC", "\uC758\uC815\uBD80\uC2DC", "\uC774\uCC9C\uC2DC", "\uD30C\uC8FC\uC2DC", "\uD3C9\uD0DD\uC2DC", "\uD3EC\uCC9C\uC2DC", "\uD558\uB0A8\uC2DC", "\uD654\uC131\uC2DC"}));
		comboBox_1.setBounds(82, 25, 99, 23);
		contentPane.add(comboBox_1);
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//지역명 라벨
		JLabel lblNewLabel = new JLabel("\uC9C0\uC5ED\uBA85");
		lblNewLabel.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		lblNewLabel.setBounds(19, 27, 41, 15);
		contentPane.add(lblNewLabel);
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		
		
		//다음페이지 버튼
		JButton btnNewButton_3 = new JButton("\uB2E4\uC74C \uD398\uC774\uC9C0");
		btnNewButton_3.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		btnNewButton_3.setBackground(Color.WHITE);
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				count++;
				loadWebData();
				String a=String.valueOf(count);
				lblNewLabel_1.setText(a);
			}
		});
		btnNewButton_3.setBounds(484, 552, 116, 23);
		contentPane.add(btnNewButton_3);
		////////////////////////////////////////////////////////////////////////////////////////////////////

		//이전페이지 버튼
		JButton btnNewButton_4 = new JButton("\uC774\uC804 \uD398\uC774\uC9C0");
		btnNewButton_4.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		btnNewButton_4.setBackground(Color.WHITE);
		btnNewButton_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(count != 1)
					count--;
				loadWebData();
				String a=String.valueOf(count);
				lblNewLabel_1.setText(a);
				
			}
		});
		btnNewButton_4.setBounds(336, 552, 116, 23);
		contentPane.add(btnNewButton_4);
		
		JLabel lblNewLabel_2 = new JLabel("\uCE74\uD14C\uACE0\uB9AC");
		lblNewLabel_2.setFont(new Font("맑은 고딕", Font.PLAIN, 12));
		lblNewLabel_2.setBounds(19, 64, 54, 15);
		contentPane.add(lblNewLabel_2);
		////////////////////////////////////////////////////////////////////////////////////////////////////

	}
	
	//시군명을 url값으로 받아줄 때 인코딩을 통해 String 값을 utf-8로 바꾸어줘야만 정상적으로 받아들임
	//String값을 인코딩해주는 메소드
	private static String incodeNM(final String filelocation)
	{
		String ss = null;
	
		try {
			ss = URLEncoder.encode(filelocation, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	
		return ss;
	}
	
	private void loadWebData() {
		//메소드를 불러올 때 기존 table 값을 비워준다.
		dataModel.clearData();
		String url ="";
		//String urlt= "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ count +"&pSize=1000&SIGUN_NM=의정부시";
		//String urlts= "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex=2&pSize=1000&SIGUN_CD=41150";

		//전지역일 때는 모든 시군의 가맹점들 출력
		if(comboBox_1.getSelectedItem() == "전지역")
			url = "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ count +"&pSize=1000";
		//다른 시군이 선택되었다면 그 시군의 가맹점만을 출력
		else 
			//url= "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ count +"&pSize=1000&SIGUN_NM="+si;
			url = "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ count +"&pSize=1000&SIGUN_NM="+incodeNM(comboBox_1.getSelectedItem().toString());

		Document res = HttpModule.requestXmlGet(url);
		
		NodeList SIGUN_NM = res.getElementsByTagName("SIGUN_NM");						//시군명
		NodeList CMPNM_NM = res.getElementsByTagName("CMPNM_NM");						//상호명
		NodeList INDUTYPE_NM=res.getElementsByTagName("INDUTYPE_NM");					//업종명
		NodeList REFINE_ROADNM_ADDR=res.getElementsByTagName("REFINE_ROADNM_ADDR");		//도로명주소
		NodeList TELNO=res.getElementsByTagName("TELNO");								//전화번호
		NodeList DATA_STD_DE=res.getElementsByTagName("DATA_STD_DE");					//데이터 기준 일자
		NodeList REFINE_WGS84_LAT=res.getElementsByTagName("REFINE_WGS84_LAT");			//위도
		NodeList REFINE_WGS84_LOGT=res.getElementsByTagName("REFINE_WGS84_LOGT");		//경도
		
		for(int i=0; i<TELNO.getLength(); ++i) 
		{
			Node nSIGUN_NM=SIGUN_NM.item(i);
			Node nCMPNM_NM = CMPNM_NM.item(i);
			Node nINDUTYPE_NM=INDUTYPE_NM.item(i);
			Node nREFINE_ROADNM_ADDR=REFINE_ROADNM_ADDR.item(i);
			Node nTELNO=TELNO.item(i);
			Node nDATA_STD_DE=DATA_STD_DE.item(i);
			Node nREFINE_WGS84_LAT=REFINE_WGS84_LAT.item(i);
			Node nREFINE_WGS84_LOGT=REFINE_WGS84_LOGT.item(i);
			
			String tel, street, category, lati, longi, sigun, storename;

			//공백값이 들어있는 항목들을 처리해준다.
			if(nTELNO.getFirstChild() == null) tel="";
			else tel=nTELNO.getFirstChild().getNodeValue();
			
			if(nREFINE_ROADNM_ADDR.getFirstChild() == null) street="";
			else street=nREFINE_ROADNM_ADDR.getFirstChild().getNodeValue();
			
			if(nINDUTYPE_NM.getFirstChild() == null) category="";
			else category=nINDUTYPE_NM.getFirstChild().getNodeValue();
			
			if(nREFINE_WGS84_LAT.getFirstChild() == null) lati="";
			else lati=nREFINE_WGS84_LAT.getFirstChild().getNodeValue();
			
			if(nREFINE_WGS84_LOGT.getFirstChild() == null) longi="";
			else longi=nREFINE_WGS84_LOGT.getFirstChild().getNodeValue();
			
			if(nSIGUN_NM.getFirstChild() == null) sigun="";
			else sigun=nSIGUN_NM.getFirstChild().getNodeValue();
			
			if(nCMPNM_NM.getFirstChild() == null) storename="";
			else storename=nCMPNM_NM.getFirstChild().getNodeValue();
			
			String date=nDATA_STD_DE.getFirstChild().getNodeValue();

			//위도, 경도 값은 dataModel로 보내주지만 출력은 하지 않음.
			Data data =new Data(sigun, storename, category, street, tel, date, lati, longi);
		
			dataModel.addData(data);
		}
	}
	
	//loadWebData 메소드 중복
	private void loadWebData(String name) 
	{
		dataModel.clearData();
		String url="";
		int cnt=1;


			String focus="";
			do {
				if(comboBox_1.getSelectedItem() == "전지역") 
					url = "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ cnt++ +"&pSize=1000";
				else 
					url	= "https://openapi.gg.go.kr/RegionMnyFacltStus?KEY=a87aef6b2f03489facc47c98c9208501&pIndex="+ cnt++ +"&pSize=1000&SIGUN_NM="+incodeNM(comboBox_1.getSelectedItem().toString());
				
				
				Document res = HttpModule.requestXmlGet(url);
				
				NodeList SIGUN_NM = res.getElementsByTagName("SIGUN_NM");						//시군명
				NodeList CMPNM_NM = res.getElementsByTagName("CMPNM_NM");						//상호명CMPNM_NM
				NodeList INDUTYPE_NM=res.getElementsByTagName("SIGUN_NM");					//업종명INDUTYPE_NM
				NodeList REFINE_ROADNM_ADDR=res.getElementsByTagName("SIGUN_NM");		//도로명주소REFINE_ROADNM_ADDR
				NodeList TELNO=res.getElementsByTagName("SIGUN_NM");								//전화번호TELNO
				NodeList DATA_STD_DE=res.getElementsByTagName("SIGUN_NM");					//데이터 기준 일자DATA_STD_DE
				NodeList REFINE_WGS84_LAT=res.getElementsByTagName("SIGUN_NM");			//위도REFINE_WGS84_LAT
				NodeList REFINE_WGS84_LOGT=res.getElementsByTagName("SIGUN_NM");		//경도REFINE_WGS84_LOGT
				
				for(int i=0; i<DATA_STD_DE.getLength(); ++i) 
				{
					//여기서 Node는 org.w3c.dom.Node
					Node nSIGUN_NM=SIGUN_NM.item(i);
					Node nCMPNM_NM = CMPNM_NM.item(i);
					Node nINDUTYPE_NM=INDUTYPE_NM.item(i);
					Node nREFINE_ROADNM_ADDR=REFINE_ROADNM_ADDR.item(i);
					Node nTELNO=TELNO.item(i);
					Node nDATA_STD_DE=DATA_STD_DE.item(i);
					Node nREFINE_WGS84_LAT=REFINE_WGS84_LAT.item(i);
					Node nREFINE_WGS84_LOGT=REFINE_WGS84_LOGT.item(i);
					
					String tel, street, category, longi, lati, sigun, storename;
					
					if(nTELNO.getFirstChild() == null) tel="";
					else tel=nTELNO.getFirstChild().getNodeValue();
					
					if(nREFINE_ROADNM_ADDR.getFirstChild() == null) street="";
					else street=nREFINE_ROADNM_ADDR.getFirstChild().getNodeValue();
					
					if(nINDUTYPE_NM.getFirstChild() == null) category="";
					else category=nINDUTYPE_NM.getFirstChild().getNodeValue();
					
					if(nREFINE_WGS84_LAT.getFirstChild() == null) lati="";
					else lati=nREFINE_WGS84_LAT.getFirstChild().getNodeValue();
					
					if(nREFINE_WGS84_LOGT.getFirstChild() == null) longi="";
					else longi=nREFINE_WGS84_LOGT.getFirstChild().getNodeValue();
					
					if(nSIGUN_NM.getFirstChild() == null) sigun="";
					else sigun=nSIGUN_NM.getFirstChild().getNodeValue();
					
					if(nCMPNM_NM.getFirstChild() == null) storename="";
					else storename=nCMPNM_NM.getFirstChild().getNodeValue();
					
					String date=nDATA_STD_DE.getFirstChild().getNodeValue();
					

					//콤보박스에 선택된 값으로 검색할 카테고리를 나눠줌
					if(choose.equals("상호명")) 
						focus=storename;
					else if(choose.equals("업종명"))
						focus=category;
					
					//검색할 값을 찾았다면 그 값에 대한 정보만 table에 출력
					if(name.equals(focus) && choose.equals("상호명"))
					{
						Data data =new Data(sigun, storename, category, street, tel, date, lati, longi);
						x=lati;
						y=longi;
						dataModel.addData(data);
						break;
					}
					else if(name.equals(focus) && choose.equals("업종명")){
						Data data =new Data(sigun, storename, category, street, tel, date, lati, longi);

						dataModel.addData(data);
					}
					
				}

				if(cnt > 20) break;

			}while(name.equals(focus) == false);
		
		
	}

}
